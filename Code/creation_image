import matplotlib.pyplot as plt

def get_derniere_heure(fichier):
  """
  Renvoie un tableau de tableaux les sous-tableaux les lignes de fichier passé en argument. Cela prend la derniere heure.
  """
  tableau = fichier.readlines()[-31:-1]
  fichier.seek(0, 0)
  nouveau_tableau = []
  for i in range(len(tableau)):
    ligne = tableau[i][:-3].split(",")
    nouveau_tableau.append(ligne)
  #Securité
  while len(nouveau_tableau) < 30:
    nouveau_tableau.append("Fausse ligne")
  return nouveau_tableau

def get_date_heure(fichier):
    tableau = fichier.readlines()[-2:-1]
    ligne = tableau[0]
    ligne = ligne.split(",")
    date = ligne[0]
    heure = ligne[1]
    fichier.seek(0, 0)
    return date + " | " + heure

def get_ordonnee(num_colonne, fichier):
    ordonnees = []
    tableau = get_derniere_heure(fichier)
    for ligne in range(30):
      valeur = tableau[ligne][num_colonne]
      #Remplace les virgules par des points pour pouvoir les convertir en float
      valeur = valeur.replace(",", ".")
      valeur = float(valeur)
      ordonnees.append(valeur)
    return ordonnees

def get_image(minimum, premier_palier, deuxieme_palier, maximum, num_colonne, titre, fichier,  **kargs):
    parametres = {
        "minimum" : minimum,
        "premier_palier" : premier_palier,
        "deuxieme_palier" : deuxieme_palier,
        "maximum" : maximum,
        "num_colonne" : num_colonne,
        "titre" : titre,
        "couleur_premiere_zone" : "green",
        "couleur_deuxieme_zone" : "yellow",
        "couleur_troisieme_zone" : "red",
        "couleur_ecriture" : "#BBE1FA",
        "couleur_trait" : "black",
        "alpha" : 0.5,
        "inverser" : False,
        "nom_axe_y" : None
    }
    #Modifie les paramtres par ceux passés en arguments optionnels
    for cle, valeur in kargs.items():
        #Lève une erreur si le nom du paramètre n'existe pas
        if cle in parametres.keys():
            parametres[cle] = valeur
        else:
            raise ValueError("mauvais nom de variable passé en argument")

    abscisse = [i for i in range(-60, 0, 2)]
    ordonnees = get_ordonnee(parametres["num_colonne"], fichier)
    #Inverse les valeur si besoin
    if parametres["inverser"]:
        ordonnees = [parametres["maximum"] - element for element in ordonnees]
    #Dessine le trait des valeurs
    plt.plot(abscisse, ordonnees, color=parametres["couleur_trait"])
    #Dessine les trois zzones en fond
    plt.axhspan(parametres["minimum"], parametres["premier_palier"], facecolor=parametres["couleur_premiere_zone"], alpha=parametres["alpha"])
    plt.axhspan(parametres["premier_palier"], parametres["deuxieme_palier"], facecolor=parametres["couleur_deuxieme_zone"], alpha=parametres["alpha"])
    plt.axhspan(parametres["deuxieme_palier"], parametres["maximum"], facecolor=parametres["couleur_troisieme_zone"], alpha=parametres["alpha"])
    #Ajoute le titre
    titre_image = parametres["titre"] + "\n" + get_date_heure(fichier)
    plt.title(titre_image, color=parametres["couleur_ecriture"])
    #Modifie la couleur des axes
    plt.xticks(color=parametres["couleur_ecriture"])
    plt.yticks(color=parametres["couleur_ecriture"])
    #Ajoute le nom des axes. L'axe y n'a pas de noms par défaut.
    plt.xlabel("Minutes", color=parametres["couleur_ecriture"])
    if parametres["nom_axe_y"] != None:
        plt.ylabel(parametres["nom_axe_y"], color=parametres["couleur_ecriture"])
    #Enregistre le fichier
    nom_fichier = parametres["titre"] + ".png"
    plt.savefig(nom_fichier, transparent=True)
    #Réinitialise le graphique pour le prochain coup
    plt.cla()

def lancer():
    fichier = open("csv_serveur.csv", "r")
    get_image(0, 5, 10, 40, 8, "Wind", fichier)
    get_image(-30, -5, 0, 40, 3, "Cloud", fichier)
    get_image(0, 1700, 2000, 2800, 5, "Rain", fichier, inverser=True)
    get_image(-10, 0, 20, 40, 6, "Temperature", fichier, couleur_premiere_zone="blue", couleur_deuxieme_zone="gray", couleur_troisieme_zone="red")
    fichier.close()
